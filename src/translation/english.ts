import { TranslationObject } from "./translationKeys";

export const englishTranslation: TranslationObject = {
  chapter: {
    classTypeOrTopicWithGroupTypeRequired: "Class type or topic with group type is required",
  },
  chapterAttachment: {
    videoAndOtherFiles: "Either Video or other files are required",
  },
  alreadyUsed: {
    email: "Email is already used",
    name: "Name is already used",
    phoneNumber: "Phone number is already used",
    nationalCardId: "National card id is already used",
    uniqueId: "Unique id is already used",
    averageRange: "Average range is already used",
    fieldName: "Field name is already used",
    subdomain: "Subdomain is already used",
    range: "Range is already used",
    subjectType: "Subject type is already used",
    term: "Term is already used",
    sessionType: "Session type is already used",
    classroom: "Classroom is already used",
    examType: "Exam type is already used",
  },
  validation: {
    parentEmailOrPhoneNumberRequired: "Parent email or phone number is required",
    newPasswordMustNoBeTheSameAsOldPassword: "New password must not be the same as old password",
    invalidPassword: "Invalid password",
  },
  alreadyExist: {
    schoolYear: "School year already exists",
  },
  authentication: {
    invalidCredentials: "Invalid credentials",
    cannotResetYourOwnPassword: "You cannot reset your own password",
    resetUserPasswordWithSuccess: "User password reset successfully",
  },
  classTypeRules: {
    classTypeAndLevelAreNotValid: "Class type and level are not valid",
  },
  global: {
    internalError: "Internal error",
    largePayload: "Payload is too large",
    listSuccessfullyRetrieved: "List is successfully retrieved",
    permissionDenied: "Permission is denied",
    variableUsedBeforeInit: "Variable is used before init",
    unsupportedFile: "Unsupported file type",
    invalidJSON: "Invalid JSON",
    success: "Success",
    accessDenied: "Access denied",
    badRequest: "Bad request",
    fileIsRequired: "File is required",
  },
  notFound: {
    chapterAttachment: "Chapter attachment not found",
    tutorial: "Tutorial not found",
    group: "Group not found",
    schoolYear: "School year is not found",
    classroom: "Classroom not found",
    teacher: "Teacher not found",
    teacherProfile: "Teacher profile not found",
    student: "Student is not found",
    user: "User is not found",
    classType: "Class type is not found",
    level: "Level is not found",
    nextClassType: "Next class type is not found",
    parent: "Parent is not found",
    homework: "Homework is not found",
    issue: "Issue is not found",
    notification: "Notification is not found",
    subjectType: "Subject type is not found",
    groupType: "Optional subject type is not found",
    school: "School is not found",
    class: "Class is not found",
    term: "Term is not found",
    service: "Service is not found",
    expense: "Expense is not found",
    supplier: "Supplier is not found",
    transaction: "Transaction is not found",
    diploma: "Diploma is not found",
    post: "Post is not found",
    comment: "Comment is not found",
    admin: "Admin is not found",
    conversation: "Conversation is not found",
    message: "Message is not found",
    session: "Session is not found",
    observation: "Punishment is not found",
    subLevel: "Sub level is not found",
    section: "Section is not found",
    subject: "Subject is not found",
    subSubjectType: "Sub subject type is not found",
    field: "Field is not found",
    examType: "Exam type is not found",
    observationReason: "Punishment reason is not found",
    holiday: "Holiday is not found",
    master: "Master is not found",
    barCode: "Bar code is not found",
    osAppVersion: " App OS version not found",
    sessionType: "Session type is not found",
    invoice: "Invoice not found.",
    alert: "Alert not found",
    topicType: "Topic type is not found",
    weeklySession: "Weekly session is not found",
    bankTransfer: "Bank transfer not found",
    preRegistration: "Pre-registration not found",
    gradeReportTemplate: "Grade report template not found",
    teacherPaymentConfiguration: "Teacher payment configuration not found",
    classGroup: "Class group not found",
    bankCheck: "Bank check not found",
    activity: "Activity not found",
    paymentHistory: "Payment history not found",
    schedule: "Schedule not found",
    paymentTemplate: "Payment template not found",
    issueReason: "Issue reason not found",
    signature: "Signature not found",
    chapter: "",
  },
  studentRules: {
    studentAlreadyAssignedToParent: "Student is already assigned to this parent",
    parentAlreadyAssignedToStudent: "Parent is already assigned to this student",
    studentNotAssignedToParent: "Student is not assigned to this parent",
    parentNotAssignedToStudent: "Parent is not assigned to this student",
    importWithSuccess: "Students imported with success",
    studentNotAssignedToClass: "Student not assigned to class.",
    studentNotAssignedToGroup: "Student not assigned to group.",
    notBelongToThisClass: "Student does not belong to this class",
  },
  student: {
    classTypeDoesNotMatch: "Class type does not match",
    alreadyInClass: "Student is already in this class",
    addedSuccessfully: "Student added successfully",
    updatedSuccessfully: "Student updated successfully",
    notAssignedToClass: "Student is not assigned to this class",
    noAverage: "Student doesn't have an average",
    noDiploma: "Student doesn't have a diploma",
    alreadyArchived: "Student has already been archived",
    cannotArchiveStudentAssignedToClass: "Cannot archive while the student is assigned to a class.",
    cannotArchiveStudentAssignedToGroups: "Cannot archive while the student is assigned to groups.",
    alreadyUnArchived: "Student already unarchived",
    cannotChangeLevelWhenAssignedToClass: "Cannot change level when assigned to class",
    cannotChangeClassTypeWhenAssignedToClass: "Cannot change class type when assigned to class",
  },
  parent: {
    addedSuccessfully: "Parent added successfully",
    alreadyArchived: "Parent has already been archived",
    cannotArchiveLastParentOfStudent: "Cannot archive the last parent of the student",
    alreadyUnArchived: "Parent already unarchived",
    updatedSuccessfully: "Parent updated successfully",
  },
  teacher: {
    salary: "Teacher salary",
    cannotTeacherThisSubjectType: "Teacher cannot teach this subject type",
    cannotTeachInThisLevel: "Teacher cannot teach in this level",
    teacherAlreadyAssigned: "Teacher already assigned to this class",
    addedSuccessfully: "Teacher added successfully",
    cannotSeeThisClassLevels: "Teacher cannot see this class levels",
    sessionDoesNotBelongsToThisTeacher: "Session does not belong to this teacher",
    alreadyArchived: "Teacher has already been archived",
    cannotArchiveTeacherAssignedToClass: "Cannot archive while the teacher is assigned to a class",
    cannotArchiveTeacherAssignedToGroup: "Cannot archive while the teacher is assigned to a group",
    alreadyUnArchived: "Teacher already unarchived",
    notAssignedToClass: "Teacher is not assigned to this class",
    updatedSuccessfully: "Teacher updated successfully",
    cannotRemoveLevelWithClasses: "Cannot remove level with classes",
    alreadyPaid: "Teacher is already paid",
    notPaid: "Teacher is not Paid",
    notAssignedToSubject: "Teacher is not assigned to this subject",
    cannotTeacherThisGroupType: "Teacher cannot teach this optional subject type",
  },
  admin: {
    addedSuccessfully: "Admin added successfully",
    updatedSuccessfully: "Admin updated successfully",
    alreadyArchived: "Admin has already been archived",
    alreadyUnArchived: "Admin already unarchived",
    CannotArchiveYourself: "You cannot archive yourself.",
  },
  roleManagement: {
    roleNotFound: "Role not found.",
    permissionNotValid: "Permission not valid.",
    createdSuccessfully: "Role created successfully.",
    updatedSuccessfully: "Role updated successfully.",
    deletedSuccessfully: "Role deleted successfully.",
  },
  services: {
    isUsed: "Service can't be deleted because it is used in paid invoices",
    doesNotHaveAmount: "Service does not have amount",
    maxDefaultServicesReached: "You have reached the maximum number of default services",
  },
  supplier: {
    addedSuccessfully: "Supplier added successfully",
    updatedSuccessfully: "Supplier updated successfully",
    deletedSuccessfully: "Supplier deleted successfully",
  },
  transaction: {
    haveSupplier: "Transaction has a supplier",
  },
  groupRules: {
    studentNotInGroup: "Student is not in this optional subject",
    groupsAndLevelsAreNotValid: "Optional subjects and levels are not valid",
    teacherIsNotInGroup: "Teacher is not teaching in this optional subject",
    studentAlreadyInGroup: "Student is already in this optional subject",
    studentAndLevelMismatch: "Student and level mismatch",
    studentClassTypeNotMatch: "Student class type does not match",
    groupHasStudent: "Group has student",
    groupIncludeInGradeBookCannotHaveMultipleLevels:
      "Group include in grade book cannot have multiple levels",
  },
  classType: {
    updateSuccessfully: "Class type updated successfully",
    createdSuccessfully: "Class type created successfully",
    subjectsReorderedSuccessfully: "Subjects reordered successfully",
    subSubjectsReorderedSuccessfully: "Sub subjects reordered successfully",
    fieldReorderedSuccessfully: "Field reordered successfully",
    subjectTypeAlreadyUsed: "Subject type is already used",
    subjectToClassTypeAddedSuccessfully: "Subject to class type added successfully",
    subjectTypeDoesNotHaveSubSubjects: "Subject type does not have sub subjects",
    subjectTypeNotFound: "Subject type not found",
    subSubjectTypeAlreadyUsed: "Sub subject type is already used",
    fieldAddedSuccessfully: "Field added successfully",
    linkedWithSomeClasses: "classType is linked with some classes",
    linkedWithSomeStudents: "classType is linked with some students",
    linkedWithSomePreRegistrations: "classType is linked with some pre-registrations",
    linkedWithSomeNextClassTypes: "classType is linked with some next class types",
    subSubjectDeletedSuccessfully: "Sub subject deleted successfully",
    linkedWithSomeSection: "Class type is linked with some section",
    subjectTypeNotIncluded: "Subject type is not included",
  },
  class: {
    maxStudentReached: "Max student reached",
    classReturnedSuccessfully: "Class returned successfully",
    updateSuccessfully: "Class updated successfully",
    deletedSuccessfully: "Class deleted successfully",
    alreadyGenerated: "Class already generated",
    hasNoStudent: "Class has no student",
    withoutNextClassType: "Class has no next class type",
    teacherAlreadyAssigned: "Teacher already assigned to this class",
    noTeacherAssigned: "Class has no teacher assigned",
  },
  classRules: {
    teacherIsNotInClass: "Teacher is not teaching in this class",
    classHasStudent: "Class has student",
    classHasTeacher: "Class has teacher",
  },
  diploma: {
    addedSuccessfully: "Diploma added successfully",
    updateSuccessfully: "Diploma updated successfully",
    diplomaNameNotFound: "Diploma name is not found",
  },
  issue: {
    accessDenied: "You don't have permission for this issue",
    newStatusMustBeDifferentThanOldStatus:
      "The new status must be different from the current status.",
    alreadyResolved: "This issue has already been resolved.",
    noTeacherAssigned: "No teacher has been assigned to this issue.",
    alreadyForwarded: "This issue has already been forwarded and cannot be forwarded again.",
    youCannotSendReply: "You cannot send a reply",
    attachmentOrTextRequired: "You must include either a message or an attachment.",
  },
  conversations: {
    groupConversationNameUpdateOnlyAllowed:
      "You can only update the name of the group conversation.",
    duplicateParticipants: "You can only update the name of the group conversation.",
    cannotRemoveAllParticipants: "You cannot remove all participants",
    alreadyParticipating: "User already participating in this conversation",
    groupNameRequired: "Group name is required",
    groupAlreadyExists: "A group with these participants already exists",
    groupConversationMinimumTwoParticipants:
      "Group conversation requires at least three participants",
    cannotRemoveTheLastAdmin: "You cannot remove the last admin",
    conversationMustBeGroup: "Conversation must be group",
    youAreNotAdminInsideThisGroup: "You are not an admin inside this group.",
    replyToMessageDoesNotBelongToThisConversation:
      "Reply to message does not belong to this conversation",
  },
  messages: {
    eitherContentOrAttachmentMustBeProvided: "Either content or attachments must be provided",
    conversationAlreadyExist: "A conversation with the specified participants already exists.",
    youAreNotAllowedToStartConversation: "You are not allowed to start a conversation.",
    youAreNotPartOfThisConversation: "You are not a participant in this conversation.",
    youCannotStartConversationByYourSelf: "You cannot start a conversation with yourself.",
  },
  term: {
    invalid: "Term is invalid",
    notCompleted: "Term is not completed",
    isCompleted: "Term is completed",
    cannotBeCompleted: "Term cannot be completed",
    previousTermNotCompleted: "Previous term is not completed",
    alreadyPublished: "Term is already published",
    notPublished: "Term is not published",
    annual: "Annual",
    previousTermsNeedToBeUncompleted:
      "Previous terms need to be uncompleted before completing this term",
  },
  invalid: {
    teacher: "Teacher is invalid",
    classType: "Class type is invalid",
    newRank: "New rank is invalid",
    subjectType: "Subject type is invalid",
    subSubjectType: "Sub subject type is invalid",
    subLevels: "Sub levels are invalid",
    class: "Class is invalid",
    examGrade: "Exam grade is invalid",
    session: "Session is invalid",
    group: "Group is invalid",
    weeklySession: "Weekly session is invalid",
    code: "Code is invalid",
  },
  subject: {
    stillTaught: "Subject is still taught",
    hasSubSubjects: "Subject has sub subjects",
    cannotHaveExams: "Subject cannot have exams",
    updatedSuccessfully: "Subject updated successfully",
  },
  section: {
    createdSuccessfully: "Section created successfully",
    updatedSuccessfully: "Section updated successfully",
    deletedSuccessfully: "Section deleted successfully",
  },
  level: {
    createdSuccessfully: "Level created successfully",
    updatedSuccessfully: "Level updated successfully",
    deletedSuccessfully: "Level deleted successfully",
    hasMultipleSchoolYear: "Level has multiple school years",
    hasSubLevels: "Level has sub levels",
    hasInvoices: "Level has invoices",
    hasTeacher: "Level has teacher",
    hasTeacherPaymentHistory: "Level has teacher payment history",
    hasStudents: "Level has students",
    hasTransactions: "Level has transactions",
    hasPreRegistrations: "Level has pre-registrations",
    hasClassTypes: "Level has class types",
    cannotSwitchToNextSchoolYear: "Cannot switch to next school year",
    unsupportedExamGradeSystem: "Exam grade system is not supported",
  },
  subLevel: {
    deletedSuccessfully: "Sub level deleted successfully",
    createdSuccessfully: "Sub level created successfully",
    updatedSuccessfully: "Sub level updated successfully",
    hasGroup: "Sub level has optional subject",
    hasSections: "Sub level has sections",
    hasClassType: "Sub level has class type",
  },
  observationReason: {
    addedSuccessfully: "Punishment reason added successfully",
    updatedSuccessfully: "Punishment reason updated successfully",
    deletedSuccessfully: "Punishment reason deleted successfully",
    IsUsed: "Punishment reason is used",
  },
  session: {
    present: "Present",
    absent: "Absent",
    late: "Late",
    expelled: "Expelled",
    sessionTimePassedForConfirmationAttendance: "Session time passed for confirmation attendance",
    sessionAlreadyClosed: "Session already closed",
    sessionMustBeInProgress: "Session must be in progress",
    sessionIsAlreadyPaid: "Session is already paid",
    enableToTerminateSessionBeforeItEnd: "Impossible to terminate session before it ends",
    teacherHasAlreadyStartedSession: "Teacher has already started session",
    youCanOnlyStartThisSessionAfterTheMinimumSessionLaunchTime:
      "You can only start this session after the minimum session launch time",
    sessionCannotBeLaunched: "Session cannot be launched",
    sessionMustBelongToAClassOrAGroupOrClassGroup:
      "Session must belong to a class, a group, or an optional subject",
    sessionStatusCannotBeUpdateItToPending: "The session cannot be updated to pending.",
    canceledSessionCanOnlyBeUpdatedToPending: "A canceled session can only be updated to pending.",
    youCanOnlyCloseThisSessionBeforeEndTime: "You can only close this session before the end time",
    cannotChangeStatusFromCompletedToPending: "Cannot change status from completed to pending",
    deletedSuccessfully: "Session deleted successfully",
    onlyPendingCanceledSessionCanBeDeleted: "Only pending or canceled sessions can be deleted",
    teacherOfThisSessionAlreadyPaid: "The teacher of this session has already been paid",
    sessionCannotBeInThePass: "Session cannot be in the past",
    teacherNotAvailable: "Teacher is not available",
    classroomNotAvailable: "Classroom is not available",
    classNotAvailable: "Class is not available",
    groupNotAvailable: "Group is not available",
    cannotUpdateInThePast: "Cannot update in the past",
    startTimeMustBeBeforeEndTime: "Start time must be before end time",
    classGroupNotAvailable: "Class group is not available",
  },
  subjectType: {
    addedSuccessfully: "Subject type added successfully",
    deletedSuccessfully: "Subject type deleted successfully",
    updatedSuccessfully: "Subject type updated successfully",
    isTaughtByTeacher: "Subject type is taught by teacher",
    isUsed: "Subject type is used",
  },
  subSubjectType: {
    addedSuccessfully: "Sub subject type added successfully",
    updatedSuccessfully: "Sub subject type updated successfully",
    deletedSuccessfully: "Sub subject type deleted successfully",
  },
  holiday: {
    createdSuccessfully: "Holiday added successfully",
    updatedSuccessfully: "Holiday updated successfully",
    deletedSuccessfully: "Holiday deleted successfully",
  },
  master: {
    addedSuccessfully: "Master added successfully",
    updatedSuccessfully: "Master updated successfully",
    deletedSuccessfully: "Master deleted successfully",
  },
  school: {
    addedSuccessfully: "School added successfully",
    configNotFound: "Config not found",
    updatedSuccessfully: "School updated successfully",
  },
  grade: {
    coefficientMustBePositive: "Coefficient must be positive",
    invalidMark: "Mark is invalid",
    markMustBeNullIfDispensed: "Mark must be null if dispensed",
    notFound: "Grade not found",
  },
  schoolYear: {
    hasEnded: "School year has ended",
  },
  weeklySession: {
    cannotBeUpdated: "Weekly session cannot be updated",
    updateSuccessfully: "Weekly session updated successfully",
  },
  invoice: {
    paymentSplitIndexOutOfRange: "Payment split index is out of range.",
    invalidPaymentMethodForSplitPayment: "The selected payment method is not valid for this split.",
    invoiceAlreadyPaid: "Invoice has already been paid.",
    splitAlreadyPaid: "Split has already been paid.",
    cannotPayInvoiceThatIsMergedIntoAnotherInvoice:
      "Cannot pay an invoice that is merged into another invoice individually.",
    transactionReferenceAlreadyExists: "Transaction reference already exists",
    salaryCannotBeNegative: "Salary cannot be negative.",
    cannotBePrinted: "Invoice cannot be printed.",
    cannotBeMerged: "Invoice cannot be merged.",
    cannotBeUnMerged: "Invoice cannot be unmerged.",
    cannotBeUnPaid: "Invoice cannot be unpaid.",
    cannotDeleteAllSplitWithExistingPaidSplits:
      "Cannot delete all splits with existing paid splits.",
    cannotBeUpdated: "Invoice cannot be updated.",
    splitsAmountNotValid: "Splits amount is not valid.",
    splitsCountNotValid: "Splits count is not valid.",
  },
  missing: {
    avatar: "Avatar is missing",
    birthDate: "Birth date is missing",
  },
  user: {
    avatarUploadedSuccessfully: "Avatar uploaded successfully",
    invalidData: "Invalid user data",
  },
  alert: {
    invalidAlertConfiguration: "Incorrect alert configuration",
    cannotUpdateSentAlert: "You cannot update an alert that has already been sent.",
    userAlreadyExists: "User already exists in this alert.",
    cannotDeleteSentAlert: "Cannot delete an alert that has already been sent.",
    notEnoughSmsSold:
      "You don't have enough SMS Sold to complete this action. Please purchase more SMS credits.",
    cannotMinusThisSmsAmount: "Cannot subtract more SMS credits than are currently available.",
    userWithoutPhoneNumber: "User without phone number",
  },
  gradeReportTemplate: {
    addedSuccessfully: "Grade report template added successfully",
    updatedSuccessfully: "Grade report template updated successfully",
    deletedSuccessfully: "Grade report template deleted successfully",
    cannotDeleteDefaultTemplate: "Cannot delete default template",
    cannotDeleteBuiltInTemplate: "Cannot delete built-in template",
  },
  bankCheck: {
    checkNumberAlreadyUsed: "Check number is already used",
    updateSuccessfully: "Bank check updated successfully",
  },
  expenses: {
    addedSuccessfully: "Expense added successfully",
    updatedSuccessfully: "Expense updated successfully",
    deletedSuccessfully: "Expense deleted successfully",
  },
  groupType: {
    coefficientRequired: "Coefficient is required",
    examsRequired: "Exams are required",
  },
  preRegistration: {
    registerStudentSuccess: "Register student successfully applied",
    missingInformation: "Missing information",
    deletePreRegistrationSuccess: "Pre registration successfully deleted",
    preRegistrationDeletionPolicy: "Only pending and rejected pre registration can be deleted",
  },
  smartCalendar: {
    activityAddedSuccessfully: "Activity added successfully",
    activityUpdatedSuccessfully: "Activity updated successfully",
    activityDeletedSuccessfully: "Activity deleted successfully",
    scheduleAlreadyInProgress: "A schedule is already in progress",
    scheduleUpdatedSuccessfully: "Schedule updated successfully",
    scheduleDeletedSuccessfully: "Schedule deleted successfully",
    scheduleInProgressCannotBeDeleted: "A schedule in progress cannot be deleted",
    scheduleAppliedSuccessfully: "Schedule applied successfully",
    scheduleCancelledSuccessfully: "Schedule cancelled successfully",
    activityWithoutTeacher: "Activity without teacher",
    scheduleStartedSuccessfully: "Schedule started successfully",
  },
  attendanceStatues: {
    present: "present",
    absent: "absent",
    late: "late",
    expelled: "expelled",
  },
  urgencies: {
    low: "low",
    high: "high",
    medium: "medium",
  },
  groupTypeRules: {
    coefficientAndExamNotValid: "Coefficient and exam not valid",
    groupTypeUsedInGroup: "Group type is used in group",
  },
  classGroup: {
    notBelongToThisClass: "Class group does not belong to this class",
  },
  signatures: {
    addedSuccessfully: "Signature added successfully",
    deletedSuccessfully: "Signature deleted successfully",
  },
  post: {
    addedSuccessfully: "Post added successfully",
    updatedSuccessfully: "Post updated successfully",
    commentsNotAllowed: "You cannot add a comment to this post",
    commentAddedSuccessfully: "Comment added successfully",
    maximumPinnedPostsReached: "You have reached the maximum number of pinned posts",
    deletedSuccessfully: "Post deleted successfully",
  },
};
