version: "3.9"

networks:
  network1:
    name: deployment-staging_backendNetwork
    external: true

services:
  mongo1:
    image: bitnami/mongodb:6.0.10
    restart: unless-stopped
    container_name: deployment-staging-mongo1
    networks:
      - network1
    ports:
      - ${MONGO1_PORT}:${MONGO1_PORT}
    volumes:
      - ~/mongo_data/staging/mongo1:/data/db
      - .keyfile:/.keyfile
    # command: 'mongod --replSet myReplicaSet --port ${MONGO1_PORT} --bind_ip_all'
    command: "mongod --replSet myReplicaSet --port ${MONGO1_PORT} --bind_ip_all --auth  --keyFile /.keyfile"
  mongo2:
    image: bitnami/mongodb:6.0.10
    restart: unless-stopped
    container_name: deployment-staging-mongo2
    networks:
      - network1
    ports:
      - ${MONGO2_PORT}:${MONGO2_PORT}
    volumes:
      - ~/mongo_data/staging/mongo2:/data/db
      - .keyfile:/.keyfile
    depends_on:
      - mongo1
    # command: 'mongod --replSet myReplicaSet --port ${MONGO2_PORT} --bind_ip_all'
    command: "mongod --replSet myReplicaSet  --port ${MONGO2_PORT} --bind_ip_all --auth --keyFile /.keyfile"
  mongo3:
    image: bitnami/mongodb:6.0.10
    restart: unless-stopped
    container_name: deployment-staging-mongo3
    networks:
      - network1
    volumes:
      - ~/mongo_data/staging/mongo3:/data/db
      - .keyfile:/.keyfile
    ports:
      - ${MONGO3_PORT}:${MONGO3_PORT}
    depends_on:
      - mongo1
    # command: 'mongod --replSet myReplicaSet --port ${MONGO3_PORT} --bind_ip_all'
    command: "mongod --replSet myReplicaSet  --port ${MONGO3_PORT} --bind_ip_all --auth --keyFile /.keyfile"
  backend:
    image: backend-${NODE_ENV}
    container_name: deployment-staging-backend
    restart: unless-stopped
    networks:
      network1:
        ipv4_address: 192.168.17.13
    volumes:
      - ../logs:/app/logs
    command: npm run start
  smart-calendar:
    image: smart-calendar-${NODE_ENV}
    container_name: deployment-staging-smart-calendar
    restart: unless-stopped
    networks:
      network1:
        ipv4_address: 192.168.17.14
    command: npm run dev:sc
  backup:
    image: backup-service-${NODE_ENV}
    container_name: deployment-staging-backup
    restart: unless-stopped
    volumes:
      - ../backups:/app/backups
    networks:
      network1:
        ipv4_address: 192.168.17.20
    command: npm run dev:backup
