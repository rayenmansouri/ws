---
description: 
globs: 
alwaysApply: false
---
- we have an old architecture and a new one in our codebase
- the old one is under folder /features
- the new one is under folder /feature
- I'm going to ask from you to refactor a given route from the old architecture to the new one, in order to do the refactoring corectly you need to strictly follow the new architecture conventions and patterns.
- You need to create the new route using this rule [creating-api-routes.mdc](mdc:.cursor/rules/creating-api-routes.mdc)
- You need to make sure that the translations are there [translation.mdc](mdc:.cursor/rules/translation.mdc)
- You also need to make sure your injectables are registered [injectables.mdc](mdc:.cursor/rules/injectables.mdc)
- Respect this rule of commenting [comments.mdc](mdc:.cursor/rules/comments.mdc)
- You must read well the base repo in order to use it efficiently [BaseRepo.ts](mdc:src/core/BaseRepo.ts), if you need to make sure an entity exists there are already methods for that, if you need to check a uniquness of a field there is method already.
- When refactoring you should now write business logic in the controller, the controller must call a use case.